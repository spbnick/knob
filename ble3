#!/usr/bin/env python3

import sys
import knob6

g = knob6.directed.Graph()
E = knob6.knowledge.EntityGraph
R = knob6.knowledge.RelationGraph
F = knob6.knowledge.FunctionGraph
T = R.ll_state_transition

device = E[""].Device

g **= (
    +device |
    +E.ll_state.Advertising(
        implementation_required=True,
        comment="Device in this state is an \"advertiser\", and is "
                "transmitting advertising physical channel packets, "
                "and listening and responding to responses."
    ) >> +E.role.Advertiser << device |
    +E.ll_state.Scanning(
        implementation_required=True,
        comment="Device in this state is a \"scanner\", and is listening for "
                "advertising physical channel packets from devices that are "
                "advertising. This state can be entered from the Standby state."
    ) >> +E.role.Scanner << device |
    +E.ll_state.Standby(
        comment="The Link Layer in the Standby state does not transmit or "
                "receive any packets. The Standby state can be entered from "
                "any other state."
    ) |
    +E.ll_state.Initiating(
        comment="The Link Layer in the Initiating state will be listening for "
                "advertising physical channel packets from a specific device(s) "
                "and responding to these packets to initiate a connection with "
                "another device. A device in the Initiating state is known as an "
                "initiator. The Initiating state can be entered from the Standby "
                "state."
    ) >> +E.role.Initiator << device |
    +E.ll_state.Connection(
        comment="The Connection state can be entered either from the Initiating "
                "state or the Advertising state. A device in the Connection "
                "state is known as being in a connection."
    ) >> +E.role["In a Connection"] << device |
    +E.ll_state.Synchronization(
        comment="The Link Layer in the Synchronization State will be listening "
                "for periodic physical channel packets forming a specific "
                "periodic advertising train, coming from a specified device that "
                "is transmitting periodic advertising. The Synchronization State "
                "can be entered from the Standby State. While in this State, the "
                "Host may direct the Link Layer to listen for isochronous data "
                "packets coming from a specified device that is transmitting a "
                "Broadcast Isochronous Group (BIG). A device that is in the "
                "Synchronization State and is receiving isochronous data packets "
                "is referred to as a Synchronized Receiver."
    ) >> +E.role["Synchronized Receiver"] << device |
    +E.ll_state["Isochronous Broadcasting"](
        comment="The Link Layer in the Isochronous Broadcasting State will "
                "transmit isochronous data packets on an isochronous physical "
                "channel. The Isochronous Broadcasting State can be entered from "
                "the Standby State. A device that is in the Isochronous "
                "Broadcasting State is referred to as an Isochronous Broadcaster."
    ) >> +E.role["Isochronous Broadcaster"] << device
)

g **= E.ll_state.Advertising >> +R.ll_state_transition >> E.ll_state.Standby
g **= E.ll_state.Advertising << +R.ll_state_transition << E.ll_state.Standby
g **= E.ll_state.Advertising >> +R.ll_state_transition >> +E.role.Peripheral(
    comment="The Link Layer in the Peripheral Role will communicate with a "
            "single device in the Central Role."
) << device

g **= E.ll_state["Isochronous Broadcasting"] >> +R.ll_state_transition >> E.ll_state.Standby
g **= E.ll_state["Isochronous Broadcasting"] << +R.ll_state_transition << E.ll_state.Standby

g **= E.ll_state.Scanning >> +R.ll_state_transition >> E.ll_state.Standby
g **= E.ll_state.Scanning << +R.ll_state_transition << E.ll_state.Standby

g **= E.ll_state.Synchronization >> +R.ll_state_transition >> E.ll_state.Standby
g **= E.ll_state.Synchronization << +R.ll_state_transition << E.ll_state.Standby

g **= E.ll_state.Initiating >> +R.ll_state_transition >> E.ll_state.Standby
g **= E.ll_state.Initiating << +R.ll_state_transition << E.ll_state.Standby
g **= E.ll_state.Initiating >> +R.ll_state_transition >> +E.role.Central(
    comment="The Link Layer in the Central Role will communicate with a "
            "device in the Peripheral Role and define the timings of "
            "transmissions."
) << device

g **= E.ll_state.Connection >> +R() >> E.role.Central >> +R.ll_state_transition >> E.ll_state.Standby
g **= E.ll_state.Connection >> +R() >> E.role.Peripheral >> +R.ll_state_transition >> E.ll_state.Standby

g **= (
    device >> +(r := R.identified_by) |
    r >> +E[""]["Device Address Type"] |
    r >> +E[""]["Device Address"]
)

with open("ble3.gv", "w") as file:
    file.write(g.graphviz())
sys.exit()

E[""]["Device Address"] << R.type_of(
    identified_by=E[""]["Device Address Type"]
) << [
    E[""]["Public Device Address"](
        length_bits=48,
        created_according_to="[Vol 2] Part B, Section 1.2",
    ),
    E[""]["Random Device Address"](
        length_bits=48
    ),
]

E[""].Device >> E[""]["Identity Address"] << R.type_of << [
    E[""]["Public Device Address"],
    E[""]["Random Static Device Address"],
]

E[""]["Random Device Address"] << R.type_of << [
    E.bitfield_value["Static device address"] << \
        R.identified_by << \
        E[""]["Random Static Device Address"](
            comment="Shall meet the following requirements:\n"
                    "• At least one bit of the random part of the address "
                    "shall be 0\n"
                    "• At least one bit of the random part of the address "
                    "shall be 1\n"
                    "\n"
                    "A device may choose to initialize its static address to "
                    "a new value after each power cycle. A device shall not "
                    "change its static address value once initialized "
                    "until the device is power cycled.\n"
                    "\n"
                    "Note: If the static address of a device is changed, "
                    "then the address stored in peer devices will not be "
                    "valid and the ability to reconnect using the old "
                    "address will be lost."
        ),
    [
        E.bitfield_value["Non-resolvable private address"] << \
            R.identified_by << \
            E[""]["Random Non-Resolvable Private Device Address"](
                comment="Requirements:\n"
                        "• At least one bit of the random part of the "
                        "address shall be 1\n"
                        "• At least one bit of the random part of the "
                        "address shall be 0\n"
                        "• The address shall not be equal to the public "
                        "address"
            ) >> R.type_of,
        E.bitfield_value["Resolvable private address"] << \
            R.identified_by << \
            E[""]["Random Resolvable Private Device Address"](
                comment="To generate a resolvable private address, the "
                        "device must have either the Local Identity "
                        "Resolving Key (IRK) or the Peer Identity Resolving "
                        "Key (IRK). The resolvable private address shall be "
                        "generated with the IRK and a randomly generated "
                        "24-bit number."
            ) >> R.type_of,
    ] >> E[""]["Random Private Device Address"]
]

E[""]["Random Device Address"] >> R.bitfields >> \
E.bitfield["Random Device Address Random Part"](len=46) >> R.followed_by >> \
(
    [
        E.bitfield_value["Non-resolvable private address"](value=0),
        E.bitfield_value["Resolvable private address"](value=1),
        E.bitfield_value["Reserved for future use"](value=2),
        E.bitfield_value["Static device address"](value=3),
    ] << R.value << E.bitfield["Random Device Address Sub-Type"](len=2)
)

E.bitfield["Random Device Address Random Part"] >> \
    R.bitfields(
        selected_by=E.bitfield_value["Resolvable private address"]
    ) >> \
    E.bitfield["Random Device Resolvable Private Address Hash"](len=24) >> \
    R.followed_by >> \
    E.bitfield["Random Device Resolvable Private "
               "Address, Random Part of Prand"](
        len=22,
        comment="Requirements: at least one bit shall be 0, "
                "at least one bit shall be 1"
    )

print(graph.render_graphviz())
